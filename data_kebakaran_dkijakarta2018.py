# -*- coding: utf-8 -*-
"""data-kebakaran-dkijakarta2018.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bbBICoNdXn_34DAclOAfXnQVtN_1vVAk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# prompt: read csv

import pandas as pd
informum_df = pd.read_csv('informum.csv')
informum_df.head()

# prompt: read csv

import pandas as pd
inforlokpak_df = pd.read_csv('inforlokpak.csv')
inforlokpak_df.head()

informum_df.info()

informum_df.isna().sum()

print("Jumlah duplikasi: ", informum_df.duplicated().sum())

# Menampilkan baris-baris yang duplikat
duplicates = informum_df[informum_df.duplicated()]
print(duplicates)

print("Jumlah duplikasi: ", informum_df.duplicated().sum())

# Menghapus duplikasi, mempertahankan baris pertama
cleaned_df = informum_df.drop_duplicates()

# Menampilkan jumlah duplikasi setelah penghapusan
print("Jumlah duplikasi setelah penghapusan: ", cleaned_df.duplicated().sum())

informum_df.describe()

# Menampilkan jumlah duplikasi setelah penghapusan
print("Jumlah duplikasi setelah penghapusan: ", cleaned_df.duplicated().sum())

informum_df.info()

informum_df['tanggal'] = pd.to_datetime(informum_df['tanggal'])
print(informum_df.info())

informum_df.describe(include="all")

inforlokpak_df.info()

import pandas as pd

# Mengonversi kolom ke tipe data yang sesuai
inforlokpak_df['kerugian_jumlah_kk'] = inforlokpak_df['kerugian_jumlah_kk'].astype('int64')
inforlokpak_df['taksiran_kerugian'] = inforlokpak_df['taksiran_kerugian'].astype('int64')
inforlokpak_df['periode_data'] = pd.to_datetime(inforlokpak_df['periode_data'])

# Menampilkan info DataFrame setelah konversi
inforlokpak_df.info()

inforlokpak_df.isna().sum()

print("Jumlah duplikasi: ", inforlokpak_df.duplicated().sum())

inforlokpak_df.describe()

# Menghapus duplikasi, mempertahankan baris pertama
cleaned_df = inforlokpak_df.drop_duplicates()

# Menampilkan jumlah duplikasi setelah penghapusan
print("Jumlah duplikasi setelah penghapusan: ", cleaned_df.duplicated().sum())

inforlokpak_df.describe()

print(inforlokpak_df[['kerugian_jumlah_kk', 'taksiran_kerugian']].isna().sum())

print(inforlokpak_df[['kerugian_jumlah_kk', 'taksiran_kerugian']].describe(include='all'))

extreme_values_kerugian = informum_df[inforlokpak_df['kerugian_jumlah_kk'] > 100]
extreme_values_taksiran = informum_df[inforlokpak_df['taksiran_kerugian'] > 1000000]
print(extreme_values_kerugian)
print(extreme_values_taksiran)

import matplotlib.pyplot as plt

# Histogram
inforlokpak_df[['kerugian_jumlah_kk', 'taksiran_kerugian']].hist(bins=50, figsize=(12, 6))
plt.show()

# Boxplot
inforlokpak_df[['kerugian_jumlah_kk', 'taksiran_kerugian']].boxplot(figsize=(12, 6))
plt.show()

import numpy as np

# Menggunakan transformasi logaritma (jika relevan)
inforlokpak_df['log_taksiran_kerugian'] = np.log1p(inforlokpak_df['taksiran_kerugian'])
inforlokpak_df[['log_taksiran_kerugian']].describe()

# Memeriksa nilai-nilai yang tidak wajar
invalid_entries = inforlokpak_df[(inforlokpak_df['kerugian_jumlah_kk'] < 0) | (inforlokpak_df['taksiran_kerugian'] < 0)]
print(invalid_entries)

inforlokpak_df.describe()

inforlokpak_df.kerugian_jumlah_kk.value_counts()

inforlokpak_df.fillna(value="0", inplace=True)

inforlokpak_df[inforlokpak_df.kerugian_jumlah_kk == inforlokpak_df.kerugian_jumlah_kk.max()]

informum_df.describe(include="all")

inforlokpak_df.describe(include="all")

informum_df.groupby(by="tanggal").agg({
    "jenis_kejadian_bencana": "first",  # Replace with an appropriate aggregation function
    "keterangan_jkb": "first"  # Replace with an appropriate aggregation function
})

# Kelompokkan berdasarkan 'tanggal' dan hitung kejadian 'jenis_kejadian_bencana'
result = informum_df.groupby(by="tanggal")['jenis_kejadian_bencana'].count()

# Temukan tanggal dengan jumlah terbanyak
tanggal_terbanyak = result.idxmax()
print("Tanggal dengan kejadian bencana terbanyak:", tanggal_terbanyak)

# Ekstrak bulan dari tanggal terbanyak
import pandas as pd
bulan_terbanyak = pd.to_datetime(tanggal_terbanyak).month_name()
print("Bulan dengan kejadian bencana terbanyak:", bulan_terbanyak)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Kelompokkan berdasarkan bulan dan hitung jumlah kejadian bencana
informum_df['bulan'] = pd.to_datetime(informum_df['tanggal']).dt.to_period('M')
monthly_counts = informum_df.groupby('bulan')['jenis_kejadian_bencana'].count()

# Temukan 5 bulan dengan jumlah terbanyak
top_10_months = monthly_counts.nlargest(10)
print("5 Bulan dengan kejadian bencana terbanyak:\n", top_10_months)

# Visualisasikan 5 bulan dengan kejadian bencana terbanyak
plt.figure(figsize=(10, 6))
sns.barplot(x=top_10_months.index.astype(str), y=top_10_months.values, palette='viridis')
plt.title('5 Bulan dengan Kejadian Bencana Terbanyak')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Kejadian Bencana')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Hitung kejadian setiap jenis bencana
jenis_bencana_counts = informum_df['jenis_kejadian_bencana'].value_counts()

# Tampilkan jenis bencana yang paling sering terjadi
print("Jenis-jenis kejadian bencana yang paling sering terjadi:")
print(jenis_bencana_counts)

import pandas as pd

# Ekstrak tahun dari kolom 'tanggal'
informum_df['tahun'] = pd.to_datetime(informum_df['tanggal']).dt.year

# Hitung jumlah tahun yang unik
jumlah_tahun = informum_df['tahun'].nunique()

print("Jumlah tahun dalam kolom 'tanggal':", jumlah_tahun)

# Tampilkan tahun-tahun yang unik
tahun_unik = informum_df['tahun'].unique()
print("Tahun-tahun yang terdapat dalam kolom 'tanggal':", tahun_unik)

inforlokpak_df.head()

# Distribusi taksiran kerugian
plt.figure(figsize=(10, 6))
sns.histplot(inforlokpak_df['taksiran_kerugian'], bins=30, kde=True, color='blue')
plt.title('Distribusi Taksiran Kerugian')
plt.xlabel('Taksiran Kerugian')
plt.ylabel('Frekuensi')
plt.show()

# Distribusi kerugian jumlah KK
plt.figure(figsize=(10, 6))
sns.histplot(inforlokpak_df['kerugian_jumlah_kk'], bins=30, kde=True, color='red')
plt.title('Distribusi Kerugian Jumlah KK')
plt.xlabel('Jumlah KK')
plt.ylabel('Frekuensi')
plt.show()

# Jumlah kejadian kebakaran per wilayah
plt.figure(figsize=(12, 8))
sns.countplot(y='wilayah', data=inforlokpak_df, palette='viridis')
plt.title('Jumlah Kejadian Kebakaran per Wilayah')
plt.xlabel('Jumlah Kejadian')
plt.ylabel('Wilayah')
plt.show()

# Ekstrak bulan dari periode_data
inforlokpak_df['periode_data'] = pd.to_datetime(inforlokpak_df['periode_data'])
inforlokpak_df['bulan'] = inforlokpak_df['periode_data'].dt.to_period('M')

# Jumlah kejadian kebakaran per bulan
monthly_counts = inforlokpak_df['bulan'].value_counts().sort_index()

plt.figure(figsize=(12, 8))
sns.barplot(x=monthly_counts.index.astype(str), y=monthly_counts.values)
plt.title('Jumlah Kejadian Kebakaran per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Kejadian')
plt.xticks(rotation=45)
plt.show()

# Jumlah kejadian kebakaran per kecamatan
plt.figure(figsize=(12, 8))
sns.countplot(y='kecamatan', data=inforlokpak_df, palette='magma')
plt.title('Jumlah Kejadian Kebakaran per Kecamatan')
plt.xlabel('Jumlah Kejadian')
plt.ylabel('Kecamatan')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Misalkan dataset Anda sudah dimuat dalam DataFrame bernama inforlokpak_df
# Hitung jumlah kejadian kebakaran per kecamatan
kecamatan_counts = inforlokpak_df['kecamatan'].value_counts()

# Ambil 10 kecamatan dengan jumlah kejadian terbanyak
top_10_kecamatan = kecamatan_counts.head(10)

# Visualisasikan 10 kecamatan dengan jumlah kejadian kebakaran terbanyak
plt.figure(figsize=(12, 8))
sns.barplot(y=top_10_kecamatan.index, x=top_10_kecamatan.values, palette='magma')
plt.title('10 Kecamatan dengan Jumlah Kejadian Kebakaran Terbanyak')
plt.xlabel('Jumlah Kejadian')
plt.ylabel('Kecamatan')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='kerugian_jumlah_kk', y='taksiran_kerugian', data=inforlokpak_df, alpha=0.6)
plt.title('Hubungan antara Kerugian Jumlah KK dan Taksiran Kerugian')
plt.xlabel('Kerugian Jumlah KK')
plt.ylabel('Taksiran Kerugian')
plt.show()

# Boxplot untuk mengecek outliers pada taksiran kerugian
plt.figure(figsize=(10, 6))
sns.boxplot(x=inforlokpak_df['taksiran_kerugian'])
plt.title('Boxplot Taksiran Kerugian')
plt.xlabel('Taksiran Kerugian')
plt.show()

all_df = pd.merge(
    left=informum_df,
    right=inforlokpak_df,
    how="left",
    left_on="tanggal",       # Ganti dengan kolom yang relevan
    right_on="periode_data"  # Ganti dengan kolom yang relevan
)
all_df.head()

# Menghapus kolom duplikat yang tidak diperlukan
all_df = all_df.drop(columns=['bulan_x', 'bulan_y'])  # Ganti dengan nama kolom yang tidak perlu

all_df.head()

# Deskripsi umum dari DataFrame
all_df.info()
all_df.describe(include='all')

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.countplot(y='jenis_kejadian_bencana', data=all_df, palette='viridis')
plt.title('Distribusi Jenis Kejadian Bencana')
plt.xlabel('Jumlah Kejadian')
plt.ylabel('Jenis Kejadian Bencana')
plt.show()

plt.figure(figsize=(14, 8))
sns.barplot(x='kerugian_jumlah_kk', y='wilayah', data=all_df, palette='magma')
plt.title('Kerugian Berdasarkan Wilayah')
plt.xlabel('Jumlah Kerugian')
plt.ylabel('Wilayah')
plt.show()

# Pastikan kolom tanggal dalam format datetime
all_df['tanggal'] = pd.to_datetime(all_df['tanggal'])

# Ekstrak bulan dan tahun dari kolom tanggal
all_df['bulan'] = all_df['tanggal'].dt.to_period('M').astype(str)

# Hitung total kerugian per bulan
kerugian_per_bulan = all_df.groupby('bulan')['kerugian_jumlah_kk'].sum().reset_index()

# Urutkan berdasarkan kerugian terbanyak
kerugian_per_bulan = kerugian_per_bulan.sort_values(by='kerugian_jumlah_kk', ascending=False)

plt.figure(figsize=(12, 6))
sns.lineplot(x='bulan', y='kerugian_jumlah_kk', data=kerugian_per_bulan, marker='o', color='blue')
plt.title('Tren Kerugian dari Bulan ke Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Kerugian')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()

# Ambil 5 bulan dengan kerugian terbanyak
top_5_bulan = kerugian_per_bulan.head(5)

plt.figure(figsize=(12, 6))
sns.barplot(x='kerugian_jumlah_kk', y='bulan', data=top_5_bulan, palette='magma')
plt.title('Top 5 Bulan dengan Kerugian Terbanyak')
plt.xlabel('Jumlah Kerugian')
plt.ylabel('Bulan')
plt.show()

plt.figure(figsize=(14, 8))
sns.barplot(x='kerugian_jumlah_kk', y='jenis_kejadian_bencana', data=all_df, palette='cividis')
plt.title('Kerugian Berdasarkan Jenis Kejadian Bencana')
plt.xlabel('Jumlah Kerugian')
plt.ylabel('Jenis Kejadian Bencana')
plt.show()

plt.figure(figsize=(12, 6))
sns.histplot(all_df['log_taksiran_kerugian'], kde=True, color='teal')
plt.title('Distribusi Log Taksiran Kerugian')
plt.xlabel('Log Taksiran Kerugian')
plt.ylabel('Frekuensi')
plt.show()

# Ekstrak bulan dari tanggal
all_df['bulan'] = pd.to_datetime(all_df['tanggal']).dt.month_name()

plt.figure(figsize=(12, 6))
sns.countplot(x='bulan', data=all_df, palette='Set2')
plt.title('Jumlah Kejadian Kebakaran per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Kejadian')
plt.xticks(rotation=45)
plt.show()

all_df.to_csv("readytouse_alldata.csv", index=False)