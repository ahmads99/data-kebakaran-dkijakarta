# -*- coding: utf-8 -*-
"""analisa-data-kejadian-kebakaran-dkijakarta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DX5hKNDFjzxRKuXKnPMv88Lac4UpTH0B
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# prompt: buatkan format untuk read csv

import pandas as pd
kebakaran_df = pd.read_csv('data-kebakaran-dkijakarta.csv')
kebakaran_df.head()

# prompt: buatkan syntax untuk hapus column _id

kebakaran_df = kebakaran_df.drop('_id', axis=1)

kebakaran_df.info()

kebakaran_df['tanggal'] = pd.to_datetime(kebakaran_df['tanggal'], format='%Y-%m-%dT%H:%M:%S') # Update the format to include time
kebakaran_df['jenis_kejadian_bencana'] = kebakaran_df['jenis_kejadian_bencana'].astype('category')
kebakaran_df['kelurahan'] = kebakaran_df['kelurahan'].astype('category')
kebakaran_df['kecamatan'] = kebakaran_df['kecamatan'].astype('category')
kebakaran_df['wilayah'] = kebakaran_df['wilayah'].astype('category')
# Replace non-numeric values with NaN before converting to integer
kebakaran_df['taksiran_kerugian'] = pd.to_numeric(kebakaran_df['taksiran_kerugian'], errors='coerce')
kebakaran_df['taksiran_kerugian'] = kebakaran_df['taksiran_kerugian'].fillna(0).astype(int) # Fill NaN with 0 and convert to int
kebakaran_df['periode_data'] = pd.to_datetime(kebakaran_df['periode_data'], format='%Y%m')

print(kebakaran_df['kerugian_jumlah_kk'].unique())

kebakaran_df.info()

kebakaran_df.isna().sum()

print("Jumlah duplikasi: ",kebakaran_df.duplicated().sum())
kebakaran_df.describe()

kebakaran_df.drop_duplicates(inplace=True)

print("Jumlah duplikasi: ",kebakaran_df.duplicated().sum())
kebakaran_df.describe()

kebakaran_df.kerugian_jumlah_kk.value_counts()

# Pastikan kolom 'kerugian_jumlah_kk' adalah numerik
kebakaran_df['kerugian_jumlah_kk'] = pd.to_numeric(kebakaran_df['kerugian_jumlah_kk'], errors='coerce')

# Tampilkan nilai unik untuk verifikasi
print(kebakaran_df['kerugian_jumlah_kk'].unique())

# Contoh: Menghapus outlier berdasarkan persentil
q_low = kebakaran_df['kerugian_jumlah_kk'].quantile(0.01)  # 1st percentile
q_hi = kebakaran_df['kerugian_jumlah_kk'].quantile(0.99)   # 99th percentile

# Filter out outlier
df_filtered = kebakaran_df[(kebakaran_df['kerugian_jumlah_kk'] > q_low) & (kebakaran_df['kerugian_jumlah_kk'] < q_hi)]

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming you want to filter your DataFrame in some way,
# create a new DataFrame called 'df_filtered'
# Replace the condition below with your actual filtering logic
df_filtered = kebakaran_df[kebakaran_df['kerugian_jumlah_kk'] > 10]

# Histogram
plt.figure(figsize=(10, 6))
sns.histplot(df_filtered['kerugian_jumlah_kk'], kde=True, bins=30)  # Use df_filtered here
plt.title('Distribusi Kerugian Jumlah KK')
plt.xlabel('Kerugian Jumlah KK')
plt.ylabel('Frekuensi')
plt.show()

# Boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(x=df_filtered['kerugian_jumlah_kk'])  # Use df_filtered here
plt.title('Boxplot Kerugian Jumlah KK')
plt.xlabel('Kerugian Jumlah KK')
plt.show()

df_filtered[['kerugian_jumlah_kk', 'taksiran_kerugian']].describe()

print("Jumlah duplikasi: ",kebakaran_df.duplicated().sum())
kebakaran_df.describe()

kebakaran_df.describe(include="all")

# Mengelompokkan data berdasarkan 'kelurahan'
df = kebakaran_df.groupby(by="kelurahan").agg({
    "kerugian_jumlah_kk": ["max", "min", "mean", "std"],
    "taksiran_kerugian": ["max", "min", "mean", "std"]
})

df.head(10)

# Menampilkan daerah dengan kerugian tertinggi berdasarkan metrik yang berbeda
print("Daerah dengan kerugian jumlah KK maksimum:")
print(df["kerugian_jumlah_kk"]["max"].sort_values(ascending=False).head())

print("\nDaerah dengan kerugian jumlah KK minimum (excluding 0):")
print(df[df["kerugian_jumlah_kk"]["min"] > 0]["kerugian_jumlah_kk"]["min"].sort_values().head())

print("\nDaerah dengan taksiran kerugian maksimum:")
print(df["taksiran_kerugian"]["max"].sort_values(ascending=False).head())

print("\nDaerah dengan taksiran kerugian minimum (excluding 0):")
print(df[df["taksiran_kerugian"]["min"] > 0]["taksiran_kerugian"]["min"].sort_values().head())

# Convert the 'tanggal' column to string type before using .str accessor
kebakaran_df['tanggal'] = kebakaran_df['tanggal'].astype(str)

# Filter data for January 2018
kebakaran_januari_2018 = kebakaran_df[kebakaran_df['tanggal'].str.startswith('2018-02')]

# Mengelompokkan data berdasarkan 'bulan' dan 'kecamatan', serta menghitung frekuensi kejadian bencana
grouped = kebakaran_januari_2018.groupby(by=['kecamatan']).size().reset_index(name='count')

# Menentukan kecamatan dengan frekuensi kejadian bencana tertinggi di Januari 2018
most_common_kecamatan = grouped.loc[grouped['count'].idxmax()]

# Menampilkan hasil
print("Kecamatan dengan kejadian bencana terbanyak di Januari 2018 adalah:")
print(most_common_kecamatan)

# Jumlah kejadian kebakaran berdasarkan lokasi
kejadian_per_lokasi = kebakaran_df[['kecamatan', 'tanggal']].value_counts()
print(kejadian_per_lokasi)

jenis_bencana_counts = kebakaran_df[['jenis_kejadian_bencana', 'tanggal']].value_counts()
print(jenis_bencana_counts)

# Rata-rata kerugian dan jumlah korban
rata_kerugian = df['kerugian_jumlah_kk'].mean()
rata_korban = df['taksiran_kerugian'].mean()

print(f"Rata-rata kerugian per KK: {rata_kerugian}")
print(f"Rata-rata taksiran kerugian: {rata_korban}")

# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns

# # Load your data into a DataFrame
# df = pd.read_csv('data-kebakaran-dkijakarta.csv')  # Replace 'data_kebakaran.csv' with your actual file name

# # Convert 'tanggal' column to datetime objects
# df['tanggal'] = pd.to_datetime(df['tanggal'])  # This line is crucial

# # Now you can proceed with the rest of your code:
# # Menambahkan kolom bulan
# df['bulan'] = df['tanggal'].dt.month

# # Menghitung jumlah kejadian per bulan
# kejadian_per_bulan = df['bulan'].value_counts().sort_index()

# # Visualisasi
# plt.figure(figsize=(10, 6))
# sns.barplot(x=kejadian_per_bulan.index, y=kejadian_per_bulan.values, palette='viridis')
# plt.xlabel('Bulan')
# plt.ylabel('Jumlah Kejadian')
# plt.title('Jumlah Kejadian Kebakaran per Bulan')
# plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load your data into a DataFrame
df = pd.read_csv('data-kebakaran-dkijakarta.csv')  # Ganti dengan nama file yang sesuai

# Convert 'tanggal' column to datetime objects
df['tanggal'] = pd.to_datetime(df['tanggal'])  # Penting

# Menambahkan kolom bulan
df['bulan'] = df['tanggal'].dt.month

# Menghitung jumlah kejadian per bulan
kejadian_per_bulan = df['bulan'].value_counts().sort_index()

# Visualisasi jumlah kejadian per bulan
plt.figure(figsize=(10, 6))
sns.barplot(x=kejadian_per_bulan.index, y=kejadian_per_bulan.values, palette='viridis')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Kejadian')
plt.title('Jumlah Kejadian Kebakaran per Bulan')
plt.show()

# Menghitung jumlah kejadian per kecamatan
kejadian_per_kecamatan = df['kecamatan'].value_counts()

# Visualisasi jumlah kejadian per kecamatan
plt.figure(figsize=(12, 8))
sns.barplot(x=kejadian_per_kecamatan.index, y=kejadian_per_kecamatan.values, palette='viridis')
plt.xticks(rotation=90)  # Rotate x labels to fit
plt.xlabel('Kecamatan')
plt.ylabel('Jumlah Kejadian')
plt.title('Jumlah Kejadian Kebakaran per Kecamatan')
plt.show()

# Menghitung jumlah kejadian per wilayah
kejadian_per_wilayah = df['wilayah'].value_counts()

# Visualisasi jumlah kejadian per wilayah
plt.figure(figsize=(12, 8))
sns.barplot(x=kejadian_per_wilayah.index, y=kejadian_per_wilayah.values, palette='viridis')
plt.xticks(rotation=90)  # Rotate x labels to fit
plt.xlabel('Wilayah')
plt.ylabel('Jumlah Kejadian')
plt.title('Jumlah Kejadian Kebakaran per Wilayah')
plt.show()

# Menghitung jumlah kejadian per kelurahan
kejadian_per_kelurahan = df['kelurahan'].value_counts()

# Ambil 10 kelurahan dengan jumlah kejadian terbanyak
top_10_kelurahan = kejadian_per_kelurahan.head(10)

# Visualisasi jumlah kejadian per kelurahan (10 teratas)
plt.figure(figsize=(14, 8))
sns.barplot(x=top_10_kelurahan.index, y=top_10_kelurahan.values, palette='viridis')
plt.xticks(rotation=90)  # Rotate x labels to fit
plt.xlabel('Kelurahan')
plt.ylabel('Jumlah Kejadian')
plt.title('10 Kelurahan dengan Jumlah Kejadian Kebakaran Terbanyak')
plt.show()

# Jumlah kejadian berdasarkan penyebab
penyebab_terbanyak = df['jenis_kejadian_bencana'].value_counts()
print(penyebab_terbanyak)

# Visualisasi
plt.figure(figsize=(12, 8))
sns.barplot(x=penyebab_terbanyak.index, y=penyebab_terbanyak.values, palette='magma')
plt.xticks(rotation=90)
plt.xlabel('Penyebab')
plt.ylabel('Jumlah Kejadian')
plt.title('Penyebab Kejadian Bencana Terbanyak')
plt.show()

# Menghitung korelasi
korelasi = kebakaran_df[['kerugian_jumlah_kk', 'taksiran_kerugian']].corr().iloc[0, 1]
print(f"Koefisien Korelasi antara Kerugian dan Jumlah Korban: {korelasi}")

# Visualisasi
plt.figure(figsize=(10, 6))
sns.scatterplot(x='kerugian_jumlah_kk', y='taksiran_kerugian', data=kebakaran_df, alpha=0.6)
plt.xlabel('Kerugian')
plt.ylabel('Jumlah Korban')
plt.title('Scatter Plot antara Kerugian dan Jumlah Korban')
plt.show()

kebakaran_df.to_csv("ready_kebakaran-jakarta2018.csv", index=False)